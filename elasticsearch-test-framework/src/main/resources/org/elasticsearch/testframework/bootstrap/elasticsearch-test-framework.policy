
grant {
      permission java.lang.RuntimePermission "getStackWalkerWithClassReference";

      // we need libnio read permission for filesystem traversal (but why?)
      // linux
      permission java.io.FilePermission "/usr/lib/jvm/java-11-openjdk-11.0.2.7-0.el7_6.x86_64/lib/libnio.so", "read";
      permission java.io.FilePermission "/usr/lib/jvm/java-11-openjdk-11.0.1.13-3.el7_6.x86_64/lib/libnio.so", "read";
      permission java.io.FilePermission "/usr/lib/jvm/zulu-11/lib/libnio.so", "read";
      // mac
      permission java.io.FilePermission "/Library/Java/JavaVirtualMachines/jdk-11.0.2.jdk/Contents/Home/lib/libnio.dylib", "read";
      permission java.io.FilePermission "/Library/Java/JavaVirtualMachines/jdk-11.0.1.jdk/Contents/Home/lib/libnio.dylib", "read";
      permission java.io.FilePermission "/Library/Java/JavaVirtualMachines/jdk-11.jdk/Contents/Home/lib/libnio.dylib", "read";
      permission java.io.FilePermission "/Library/Java/JavaVirtualMachines/zulu-11.jdk/Contents/Home/lib/libnio.dylib", "read";

};

//// additional test framework permissions.
//// These are mock objects and test management that we allow test framework libs
//// to provide on our behalf. But tests themselves cannot do this stuff.

grant codeBase "${codebase.elasticsearch}" {
    // needed by mockito/bytebuddy for creating mocks with the protection domain
    permission java.lang.RuntimePermission "accessDeclaredMembers";
    permission java.lang.reflect.ReflectPermission "suppressAccessChecks";
};

grant codeBase "${codebase.elasticsearch-tests}" {
    permission java.lang.RuntimePermission "accessDeclaredMembers";
    permission java.lang.reflect.ReflectPermission "suppressAccessChecks";
};

grant codeBase "${codebase.elasticsearch-test-framework}" {
    permission java.lang.RuntimePermission "accessDeclaredMembers";
    permission java.lang.reflect.ReflectPermission "suppressAccessChecks";
    // needed for module plugin loading
    permission java.lang.RuntimePermission "getClassLoader";
    // for integration tests with netty plugin
    permission java.net.SocketPermission "*", "accept,connect";
};

grant codeBase "${codebase.lucene}" {
    // needed for RAMUsageTester
    // org.apache.lucene.util.RamUsageEstimator$1.run
    permission java.lang.RuntimePermission "accessDeclaredMembers";
    permission java.lang.RuntimePermission "accessClassInPackage.sun.misc";
    permission java.lang.reflect.ReflectPermission "suppressAccessChecks";
};

grant codeBase "${codebase.lucene-test-framework}" {
    // needed by RamUsageTester
    permission java.lang.reflect.ReflectPermission "suppressAccessChecks";
    permission java.lang.RuntimePermission "accessDeclaredMembers";
    // needed for testing hardlinks in StoreRecoveryTests since we install MockFS
    permission java.nio.file.LinkPermission "hard";
    // FilterFileSystemProvider and Files.walkFileTree
    permission java.io.FilePermission "*", "read";
};

grant codeBase "${codebase.randomizedtesting-junit4-ant}" {
    permission org.elasticsearch.secure_sm.ThreadPermission "modifyArbitraryThreadGroup";
    // needed to fail tests on uncaught exceptions from other threads
    permission java.lang.RuntimePermission "setDefaultUncaughtExceptionHandler";
    // optionally needed for access to private test methods (e.g. beforeClass)
    permission java.lang.reflect.ReflectPermission "suppressAccessChecks";
    // needed for TestClass creation
    permission java.lang.RuntimePermission "accessDeclaredMembers";
    // needed for module plugin loading
    permission java.lang.RuntimePermission "getClassLoader";
};

grant codeBase "${codebase.randomizedtesting}" {
    permission org.elasticsearch.secure_sm.ThreadPermission "modifyArbitraryThreadGroup";
    // needed to fail tests on uncaught exceptions from other threads
    permission java.lang.RuntimePermission "setDefaultUncaughtExceptionHandler";
    // optionally needed for access to private test methods (e.g. beforeClass)
    permission java.lang.reflect.ReflectPermission "suppressAccessChecks";
    // needed for TestClass creation
    permission java.lang.RuntimePermission "accessDeclaredMembers";
    // needed for module plugin loading
    permission java.lang.RuntimePermission "getClassLoader";
};

grant codeBase "${codebase.junit}" {
    // needed for TestClass creation
    permission java.lang.RuntimePermission "accessDeclaredMembers";
    permission java.lang.reflect.ReflectPermission "suppressAccessChecks";
};

grant codeBase "${codebase.securemock}" {
    // needed to access ReflectionFactory
    permission java.lang.RuntimePermission "accessClassInPackage.sun.reflect";
    permission java.lang.RuntimePermission "accessClassInPackage.jdk.internal.ref";
    // needed to define classes
    permission java.lang.RuntimePermission "defineClass";
    // needed to support creation of mocks
    permission java.lang.RuntimePermission "reflectionFactoryAccess";
    // needed for spy interception, etc
    permission java.lang.RuntimePermission "accessDeclaredMembers";
    // needed by bytebuddy ClassInjector
    permission java.lang.RuntimePermission "createClassLoader";
    permission java.lang.RuntimePermission "getClassLoader";
    permission java.lang.reflect.ReflectPermission "suppressAccessChecks";
    // caller class in new Mockito
    permission java.lang.RuntimePermission "getStackWalkerWithClassReference";
};

grant codeBase "${codebase.mocksocket}" {
    // mocksocket makes and accepts socket connections
    permission java.net.SocketPermission "*", "accept,connect";
};

grant codeBase "${codebase.elasticsearch-rest-client}" {
    // rest makes socket connections for rest tests
    permission java.net.SocketPermission "*", "connect";
    // rest client uses system properties which gets the default proxy
    permission java.net.NetPermission "getProxySelector";
};

grant codeBase "${codebase.httpcore-nio}" {
    // httpcore makes socket connections for rest tests
    permission java.net.SocketPermission "*", "connect";
};

grant codeBase "${codebase.httpasyncclient}" {
    // httpasyncclient makes socket connections for rest tests
    permission java.net.SocketPermission "*", "connect";
    // rest client uses system properties which gets the default proxy
    permission java.net.NetPermission "getProxySelector";
};

grant codeBase "${codebase.netty}" {
    // at io.netty.util.concurrent.GlobalEventExecutor$2.run(GlobalEventExecutor.java:228) ~[netty-6.3.2.1.jar:?]
    permission java.lang.RuntimePermission "setContextClassLoader";
};
