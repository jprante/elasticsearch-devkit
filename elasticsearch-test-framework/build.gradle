buildscript {
    repositories {
        jcenter()
        maven {
            url 'https://xbib.org/repository'
        }
    }
    dependencies {
        classpath "org.xbib.elasticsearch:gradle-plugin-elasticsearch-build:${project.property('elasticsearch-devkit-gradle-plugins.version')}"
    }
}

apply plugin: 'org.xbib.gradle.plugin.elasticsearch.build'

dependencies {
    compile "org.xbib.elasticsearch:lucene-test-framework:${project.property('elasticsearch-libs.version')}"
    compile "org.xbib.elasticsearch:randomizedtesting-junit4-ant:${project.property('elasticsearch-libs.version')}"
    compile "org.xbib.elasticsearch:securemock:${project.property('elasticsearch-libs.version')}"
    compile "org.xbib.elasticsearch:mocksocket:${project.property('elasticsearch-libs.version')}"
    compile "org.xbib.elasticsearch:elasticsearch:${project.property('elasticsearch-server.version')}"
    compile "org.xbib.elasticsearch:elasticsearch-rest-client:${project.property('elasticsearch-client.version')}"
}

afterEvaluate {
    compileJava {
        inputs.property("moduleName", 'org.xbib.elasticsearch.test')
        doFirst {
            options.compilerArgs = [
                    '-Xlint:-rawtypes,-unchecked',
                    '--module-path', classpath.asPath
            ]
            classpath = files()
        }
    }
    compileTestJava {
        inputs.property("moduleName", 'org.xbib.elasticsearch.test.test')
        doFirst {
            options.compilerArgs = [
                    '--module-path', classpath.asPath
            ]
            classpath = files()
        }
    }
    javadoc {
        inputs.property("moduleName", 'org.xbib.elasticsearch.test')
        doFirst {
            options.addStringOption('-module-path', classpath.asPath)
            classpath = files()
        }
    }
}

artifacts {
    archives sourcesJar, javadocJar
}

clean {
    delete fileTree('.') { include '.local*.log' }
}

test {
    enabled = false
    dependsOn 'jar', 'testJar'
    doFirst {
        classpath = files(configurations.testRuntime) + configurations.mains.artifacts.files + configurations.tests.artifacts.files
        jvmArgs = [
                '--module-path', classpath.asPath,
                '--add-modules', 'ALL-MODULE-PATH'
        ]
        testLogging.showStandardStreams = true
        scanForTestClasses = false
        include "**/Test*.class"
        exclude '**/Test*$*.class'
    }
}

randomizedTest {
    enabled = false
    dependsOn 'jar', 'testJar'
    doFirst {
        modulepath = files(configurations.testRuntime) + configurations.mains.artifacts.files + configurations.tests.artifacts.files
        jvmArgs = [
                '--module-path', modulepath.asPath,
                '--add-modules', 'ALL-MODULE-PATH'
        ]
        include "**/Test*.class"
        exclude '**/Test*$*.class'
        exclude '**/TestingSocketEventHandler.class'
        exclude '**/TestSelectionKey.class'
    }
}

esTest {
    enabled = true
    systemProperty 'tests.gradle_index_compat_versions', project.rootProject.ext.elasticsearchVersionCollection.getIndexCompatible().join(',')
    systemProperty 'tests.gradle_wire_compat_versions', project.rootProject.ext.elasticsearchVersionCollection.getWireCompatible().join(',')
    systemProperty 'tests.logger.level', 'ALL'
    systemProperty 'tests.security.manager', 'true'
    //systemProperty 'java.security.debug', 'access,failure'
    //systemProperty 'tests.class', 'org.elasticsearch.testframework.test.ESTestCaseTests'

    jvmArg '--add-reads=org.xbib.elasticsearch.securemock=org.xbib.elasticsearch.server'
}

namingConventions.enabled = false

dependencyLicenses.enabled = false

dependenciesInfo.enabled = false

forbiddenApisMain.enabled = true

forbiddenApisTest.enabled = true

checkstyleMain.enabled = true

checkstyleTest.enabled = true

jarHell.enabled = true

loggerUsageCheck.enabled = true

thirdPartyAudit.enabled = false

apply from: "${rootProject.projectDir}/gradle/publish.gradle"
